/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.Configurazione;
import io.swagger.client.model.Giocatori;
import io.swagger.client.model.IterableAllenatori;
import io.swagger.client.model.IterableFantarose;
import io.swagger.client.model.IterableGiocatori;
import io.swagger.client.model.IterableLoggerMessaggi;
import io.swagger.client.model.IterableSpesoTotale;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyControllerAstaApi
 */
@Ignore
public class MyControllerAstaApiTest {

    private final MyControllerAstaApi api = new MyControllerAstaApi();

    
    /**
     * addFav
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addFavUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.addFavUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * aggiornaConfigLega
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaConfigLegaUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.aggiornaConfigLegaUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingDELETETest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingGETTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingGET();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingHEADTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingOPTIONSTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingPATCHTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingPOSTTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingPOST();

        // TODO: test validations
    }
    
    /**
     * aggiornaDataNascita
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaDataNascitaUsingPUTTest() throws Exception {
        List<Giocatori> response = api.aggiornaDataNascitaUsingPUT();

        // TODO: test validations
    }
    
    /**
     * aggiornaSessioneNomeUtente
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void aggiornaSessioneNomeUtenteUsingPOSTTest() throws Exception {
        Object body = null;
        api.aggiornaSessioneNomeUtenteUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * azzera
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void azzeraUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.azzeraUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * cancellaOfferta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancellaOffertaUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.cancellaOffertaUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * cancellaSessioneNomeUtente
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancellaSessioneNomeUtenteUsingPOSTTest() throws Exception {
        Object response = api.cancellaSessioneNomeUtenteUsingPOST();

        // TODO: test validations
    }
    
    /**
     * caricaFile
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void caricaFileUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.caricaFileUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * confermaAsta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void confermaAstaUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.confermaAstaUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * cripta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void criptaUsingGETTest() throws Exception {
        String key = null;
        String pwd = null;
        Map<String, String> response = api.criptaUsingGET(key, pwd);

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingDELETETest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingGETTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingGET();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingHEADTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingOPTIONSTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingPATCHTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingPOSTTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingPOST();

        // TODO: test validations
    }
    
    /**
     * elencoCronologiaOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoCronologiaOfferteUsingPUTTest() throws Exception {
        List<Map<String, Object>> response = api.elencoCronologiaOfferteUsingPUT();

        // TODO: test validations
    }
    
    /**
     * elencoLoggerMessaggi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoLoggerMessaggiUsingGETTest() throws Exception {
        IterableLoggerMessaggi response = api.elencoLoggerMessaggiUsingGET();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingDELETETest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingGETTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingGET();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingHEADTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingOPTIONSTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingPATCHTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingPOSTTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingPOST();

        // TODO: test validations
    }
    
    /**
     * elencoOfferte
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void elencoOfferteUsingPUTTest() throws Exception {
        List<Map<String, Object>> response = api.elencoOfferteUsingPUT();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingDELETETest() throws Exception {
        api.esportaMantraUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingGETTest() throws Exception {
        api.esportaMantraUsingGET();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingHEADTest() throws Exception {
        api.esportaMantraUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingOPTIONSTest() throws Exception {
        api.esportaMantraUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingPATCHTest() throws Exception {
        api.esportaMantraUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingPOSTTest() throws Exception {
        api.esportaMantraUsingPOST();

        // TODO: test validations
    }
    
    /**
     * esportaMantra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaMantraUsingPUTTest() throws Exception {
        api.esportaMantraUsingPUT();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingDELETETest() throws Exception {
        api.esportaUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingGETTest() throws Exception {
        api.esportaUsingGET();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingHEADTest() throws Exception {
        api.esportaUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingOPTIONSTest() throws Exception {
        api.esportaUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingPATCHTest() throws Exception {
        api.esportaUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingPOSTTest() throws Exception {
        api.esportaUsingPOST();

        // TODO: test validations
    }
    
    /**
     * esporta
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void esportaUsingPUTTest() throws Exception {
        api.esportaUsingPUT();

        // TODO: test validations
    }
    
    /**
     * getAllAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllAllenatoriUsingGETTest() throws Exception {
        IterableAllenatori response = api.getAllAllenatoriUsingGET();

        // TODO: test validations
    }
    
    /**
     * getAllFantarose
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllFantaroseUsingGETTest() throws Exception {
        IterableFantarose response = api.getAllFantaroseUsingGET();

        // TODO: test validations
    }
    
    /**
     * getAllGiocatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllGiocatoriUsingGETTest() throws Exception {
        IterableGiocatori response = api.getAllGiocatoriUsingGET();

        // TODO: test validations
    }
    
    /**
     * getConfigurazione
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConfigurazioneUsingGETTest() throws Exception {
        Configurazione response = api.getConfigurazioneUsingGET();

        // TODO: test validations
    }
    
    /**
     * getGiocatoriLiberi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getGiocatoriLiberiUsingGETTest() throws Exception {
        List<Map<String, Object>> response = api.getGiocatoriLiberiUsingGET();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingDELETETest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingGETTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingGET();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingHEADTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingOPTIONSTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingPATCHTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingPOSTTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingPOST();

        // TODO: test validations
    }
    
    /**
     * giocatoriPerSquadra
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void giocatoriPerSquadraUsingPUTTest() throws Exception {
        Map<String, Map<String, Object>> response = api.giocatoriPerSquadraUsingPUT();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingDELETETest() throws Exception {
        Object response = api.initUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingGETTest() throws Exception {
        Object response = api.initUsingGET();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingHEADTest() throws Exception {
        Object response = api.initUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingOPTIONSTest() throws Exception {
        Object response = api.initUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingPATCHTest() throws Exception {
        Object response = api.initUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingPOSTTest() throws Exception {
        Object response = api.initUsingPOST();

        // TODO: test validations
    }
    
    /**
     * init
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void initUsingPUTTest() throws Exception {
        Object response = api.initUsingPUT();

        // TODO: test validations
    }
    
    /**
     * inizializzaLega
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void inizializzaLegaUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.inizializzaLegaUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * keepAlive
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void keepAliveUsingGETTest() throws Exception {
        api.keepAliveUsingGET();

        // TODO: test validations
    }
    
    /**
     * leggi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void leggiUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.leggiUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * restore
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void restoreUsingPOSTTest() throws Exception {
        Object body = null;
        Object response = api.restoreUsingPOST(body);

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingDELETETest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingGETTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingGET();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingHEADTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingOPTIONSTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingPATCHTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingPOSTTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingPOST();

        // TODO: test validations
    }
    
    /**
     * riepilogoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void riepilogoAllenatoriUsingPUTTest() throws Exception {
        List<Map<String, Object>> response = api.riepilogoAllenatoriUsingPUT();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingDELETETest() throws Exception {
        Object response = api.sesHUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingGETTest() throws Exception {
        Object response = api.sesHUsingGET();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingHEADTest() throws Exception {
        Object response = api.sesHUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingOPTIONSTest() throws Exception {
        Object response = api.sesHUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingPATCHTest() throws Exception {
        Object response = api.sesHUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingPOSTTest() throws Exception {
        Object response = api.sesHUsingPOST();

        // TODO: test validations
    }
    
    /**
     * sesH
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesHUsingPUTTest() throws Exception {
        Object response = api.sesHUsingPUT();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingDELETETest() throws Exception {
        Object response = api.sesWUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingGETTest() throws Exception {
        Object response = api.sesWUsingGET();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingHEADTest() throws Exception {
        Object response = api.sesWUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingOPTIONSTest() throws Exception {
        Object response = api.sesWUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingPATCHTest() throws Exception {
        Object response = api.sesWUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingPOSTTest() throws Exception {
        Object response = api.sesWUsingPOST();

        // TODO: test validations
    }
    
    /**
     * sesW
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void sesWUsingPUTTest() throws Exception {
        Object response = api.sesWUsingPUT();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingDELETETest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingGETTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingGET();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingHEADTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingOPTIONSTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingPATCHTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingPOSTTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingPOST();

        // TODO: test validations
    }
    
    /**
     * spesoAllenatori
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoAllenatoriUsingPUTTest() throws Exception {
        List<Map<String, Object>> response = api.spesoAllenatoriUsingPUT();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingDELETETest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingGETTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingGET();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingHEADTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingOPTIONSTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingPATCHTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingPOSTTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingPOST();

        // TODO: test validations
    }
    
    /**
     * spesoTotale
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void spesoTotaleUsingPUTTest() throws Exception {
        IterableSpesoTotale response = api.spesoTotaleUsingPUT();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingDELETETest() throws Exception {
        api.visFmvUsingDELETE();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingGETTest() throws Exception {
        api.visFmvUsingGET();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingHEADTest() throws Exception {
        api.visFmvUsingHEAD();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingOPTIONSTest() throws Exception {
        api.visFmvUsingOPTIONS();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingPATCHTest() throws Exception {
        api.visFmvUsingPATCH();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingPOSTTest() throws Exception {
        api.visFmvUsingPOST();

        // TODO: test validations
    }
    
    /**
     * visFmv
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void visFmvUsingPUTTest() throws Exception {
        api.visFmvUsingPUT();

        // TODO: test validations
    }
    
}
